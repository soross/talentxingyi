package com.imo.db.sql;import android.content.Context;import android.database.sqlite.SQLiteDatabase;import android.database.sqlite.SQLiteOpenHelper;public class DataHelper {	// 数据库表名构建方式：imo+用户ID	private static String dataBaseName = "imo";	private static final int DATABASE_VERSION = 1;	/**	 * 部门信息	 */	public static String CorpInfo = "CorpInfo";	/**	 * 部门信息	 */	public static String DeptInfo = "DeptInfo";	/**	 * 部门，部门员工UC表	 */	public static String DeptAndUserUC = "DeptAndUserUC";	/**	 * 部门员工信息，维护部门和员工关系的表	 */	public static String DeptUserInfo = "DeptUserInfo";	/**	 * 外部联系人的组信息	 */	public static String OuterGroupInfo = "OuterGroupInfo";	/**	 * 最近联系人信息	 */	public static String RecentContact = "RecentContact";	/**	 * 员工基本信息	 */	public static String UserBaseInfo = "UserBaseInfo";	/**	 * 员工详细信息	 */	public static String UserProfile = "UserProfile";	/**	 * 内部联系人的组信息	 */	public static String InnerGroupInfo = "InnerGroupInfo";	/**	 * 内部联系人列表信息，主要用于维护内部联系人与所在的组的从属关系	 */	public static String InnerContactListInfo = "InnerContactListInfo";	/**	 * 外部联系人列表信息，主要用于维护外部联系人与所在的组的从属关系	 */	public static String ExternalContactListInfo = "ExternalContactListInfo";	/**	 * 内部组UC	 */	public static String InnerGroupUC = "InnerGroupUC";	/**	 * 内部联系人UC	 */	public static String InnerContactUC = "InnerContactUC";	/**	 * 外部组UC	 */	public static String ExternalGroupUC = "ExternalGroupUC";	/**	 * 外部联系人UC	 */	public static String ExternalContactUC = "ExternalContactUC";	/**	 * 消息记录	 */	public static String MessageInfo = "MessageInfo";	/**	 * 外部联系人基本信息	 */	public static  String  OuterContactInfo = "OuterContactInfo";	/**	 * 外部公司信息	 */	public static  String  OuterCorpInfo = "OuterCorpInfo";	// 以下表第一期不使用	public static String SessionList = "SessionList";	public static String QGroupShareFileInfo = "QGroupShareFileInfo";	public static String QGroupFileListUC = "QGroupFileListUC";	public static String UserQGroupListUC = "UserQGroupListUC";	public static String UserQGroupId = "UserQGroupId";	public static String UserSessionListUC = "UserSessionListUC";	public static String UpdateSessionListId = "UpdateSessionListId";	private SQLiteDatabase db;	public DataHelper(Context _context, Integer uId) throws Exception {		if (uId == null) {			throw new Exception("创建数据库失败，cId和uId不能为空");		}		dataBaseName = "imo" + uId;		OpenHelper openHelper = new OpenHelper(_context);		this.db = openHelper.getWritableDatabase();	}	public SQLiteDatabase getDb() {		return db;	}	private static class OpenHelper extends SQLiteOpenHelper {		public OpenHelper(Context context) {			super(context, dataBaseName, null, DATABASE_VERSION);		}		@Override		public void onCreate(SQLiteDatabase db) {			db.beginTransaction();			try {				switch (DATABASE_VERSION) {				case 1:					createVer1(db);					break;				default:					break;				}				db.setTransactionSuccessful();			} catch (Exception e) {			} finally {				db.endTransaction();			}		}		@Override		public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {			db.beginTransaction();			try {				// 修改表				switch (newVersion) {				case 2:					break;				default:					break;				}				db.setTransactionSuccessful();			} catch (Exception e) {			} finally {				db.endTransaction();			}		}		private void createVer1(SQLiteDatabase db) {			db.execSQL("CREATE TABLE "					+ CorpInfo					+ " (corp_account TEXT,short_name TEXT,cn_name TEXT,domain TEXT,state INTEGER,"					+ "user_card INTEGER,logo_type INTEGER,en_name TEXT,nation TEXT,province TEXT,city TEXT,country TEXT,addr TEXT,type INTEGER,desp TEXT,zipcode INTEGER,tel TEXT,fax TEXT,contactor TEXT,"					+ "email TEXT,website TEXT,reg_capital INTEGER,employee_num INTEGER,pc_num INTEGER,slogan TEXT,config TEXT,primary key(corp_account))");			db.execSQL("CREATE TABLE "					+ DeptInfo					+ "(Cid INTEGER,Did INTEGER,Name varchar(100),PDid INTEGER,UC INTEGER,DeptUserUC INTEGER,FirstChild INTEGER,"					+ "NextSibling INTEGER,Desp varchar(200),Fax varchar(100),HideDeptList varchar(100),Addr varchar(100),"					+ "Tel varchar(50),Website varchar(100),FirstChildUser INTEGER,primary key(Cid,Did))");			db.execSQL("CREATE TABLE "					+ DeptAndUserUC					+ "(Did INTEGER, UC INTEGER, USER_UC INTEGER, primary key(Did))");			db.execSQL("CREATE TABLE "					+ DeptUserInfo					+ "(Did INTEGER, Uid INTEGER, NextSiblingUid INTEGER, primary key(Did,Uid))");			db.execSQL("CREATE TABLE "					+ ExternalContactListInfo					+ "(Gid INTEGER,Cid INTEGER,Uid INTEGER,Flag INTEGER,primary key(Uid))");			db.execSQL("CREATE TABLE "					+ ExternalContactUC					+ "(ExternalContactUC INTEGER,primary key(ExternalContactUC))");			db.execSQL("CREATE TABLE " + ExternalGroupUC					+ "(ExternalGroupUC INTEGER,primary key(ExternalGroupUC))");			db.execSQL("CREATE TABLE "					+ InnerContactListInfo					+ "(Gid INTEGER,Cid INTEGER,Uid INTEGER,Flag INTEGER,primary key(Uid))");			db.execSQL("CREATE TABLE " + InnerContactUC					+ "(InnerContactUC INTEGER,primary key(InnerContactUC))");			db.execSQL("CREATE TABLE " + InnerGroupInfo					+ "(Gid INTEGER,Name varchar(100),primary key(Gid))");			db.execSQL("CREATE TABLE " + InnerGroupUC					+ "(InnerGroupUC INTEGER,primary key(InnerGroupUC))");			db.execSQL("CREATE TABLE " + OuterGroupInfo					+ "(Gid INTEGER,Name varchar(100),primary key(Gid))");			db.execSQL("CREATE TABLE "					+ RecentContact					+ "(type INTEGER,UId INTEGER,Name TEXT, Date TEXT, Time TEXT,CId INTEGER,primary key(type,UId))");			db.execSQL("CREATE TABLE "					+ UserBaseInfo					+ "(Uid INTEGER primary key,Cid INTEGER,Did INTEGER,Flag INTEGER,Account varchar(100),SimplePY varchar(100),Name varchar(100),Gender INTEGER)");			db.execSQL("CREATE TABLE "					+ MessageInfo					+ "(RecId INTEGER,SessionId INTEGER,FromUid INTEGER,FromName TEXT,ToUid INTEGER,ToName TEXT,Date TEXT,Time TEXT,Message TEXT,Type INTEGER,MsgId INTEGER,IsRead INTEGER,IsFailed INTEGER,primary key(RecId))");			db.execSQL("CREATE TABLE "					+ UserProfile					+ "(RecId INTEGER,user_account TEXT,corp_account TEXT,name TEXT,gender INTEGER,sign TEXT,mobile TEXT, email TEXT,"					+ "role_id INTEGER,head_pic INTEGER,privacy_flag INTEGER,birth INTEGER,pos TEXT,tel TEXT,desp TEXT,hide_dept_list TEXT,primary key(RecId))");						db.execSQL("CREATE TABLE "					+ OuterContactInfo					+ "(cid INTEGER,uid INTEGER,corpAccount TEXT,userAccount TEXT,name TEXT,gender INTEGER,SimplePY varchar(100),primary key(uid))");						db.execSQL("CREATE TABLE "					+ OuterCorpInfo					+ "(cid INTEGER,name TEXT,primary key(cid))");		}	}}